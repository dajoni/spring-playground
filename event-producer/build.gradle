plugins {
	id 'org.springframework.boot' 
	id 'io.spring.dependency-management'
	id 'com.palantir.docker' 
	id 'com.palantir.git-version' 
	id 'java'
	id 'project-report'
}

springBoot {
	buildInfo()
}

def versionDetails = versionDetails()
def branchName = versionDetails.branchName
if (System.getenv("CI_COMMIT_REF_NAME") != null) {
	branchName = System.getenv("CI_COMMIT_REF_NAME")
}

if (branchName == "master") {
	version = gitVersion()
} else {
	version = "${branchName}-${gitVersion()}"
}
sourceCompatibility = 8
targetCompatibility = 8

docker.dependsOn bootJar


docker {
	name "registry.gitlab.com/dajoni/spring-playground/event-producer:${project.version}"
	tags 'latest'
	files bootJar.outputs
	dockerfile file("src/main/docker/Dockerfile")
}

test {
	useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

dependencies {
	compileOnly("org.projectlombok:lombok:1.16.20")
	// gradle 4.9 and 1.16.22 are incompatible
	compileOnly("org.springframework.boot:spring-boot-configuration-processor")
    implementation project(":avro-schema")
	implementation('org.springframework.boot:spring-boot-starter')
	implementation("io.confluent:kafka-avro-serializer:4.1.1") {
		// using slf4j from spring
		exclude group: "log4j", module: "log4j"
		exclude group: "org.slf4j", module: "slf4j-log4j12"		
	}
    implementation("org.apache.kafka:kafka_2.11:1.1.1-cp1") {
		// using slf4j from spring
		exclude group: "log4j", module: "log4j"
		exclude group: "org.slf4j", module: "slf4j-log4j12"		
	}

    implementation('org.springframework.kafka:spring-kafka') {
        exclude module: "kafka-clients"
    }



	testCompileOnly("org.projectlombok:lombok:1.16.20")
	// gradle 4.9 and 1.16.22 are incompatible
	testImplementation('org.junit.jupiter:junit-jupiter-api:5.2.0')
	testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.0')
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: "junit", module: "junit"
	}
}
