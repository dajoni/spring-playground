/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package dajoni.spring.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** An event happened. */
@org.apache.avro.specific.AvroGenerated
public class AnEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4824773995434347380L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AnEvent\",\"namespace\":\"dajoni.spring.schema\",\"doc\":\"An event happened.\",\"fields\":[{\"name\":\"participantA\",\"type\":\"int\"},{\"name\":\"participantB\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"set\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int participantA;
  @Deprecated public int participantB;
  @Deprecated public long timestamp;
  @Deprecated public java.lang.String id;
  @Deprecated public java.lang.String set;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AnEvent() {}

  /**
   * All-args constructor.
   * @param participantA The new value for participantA
   * @param participantB The new value for participantB
   * @param timestamp The new value for timestamp
   * @param id The new value for id
   * @param set The new value for set
   */
  public AnEvent(java.lang.Integer participantA, java.lang.Integer participantB, java.lang.Long timestamp, java.lang.String id, java.lang.String set) {
    this.participantA = participantA;
    this.participantB = participantB;
    this.timestamp = timestamp;
    this.id = id;
    this.set = set;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return participantA;
    case 1: return participantB;
    case 2: return timestamp;
    case 3: return id;
    case 4: return set;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: participantA = (java.lang.Integer)value$; break;
    case 1: participantB = (java.lang.Integer)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: id = (java.lang.String)value$; break;
    case 4: set = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'participantA' field.
   * @return The value of the 'participantA' field.
   */
  public java.lang.Integer getParticipantA() {
    return participantA;
  }

  /**
   * Sets the value of the 'participantA' field.
   * @param value the value to set.
   */
  public void setParticipantA(java.lang.Integer value) {
    this.participantA = value;
  }

  /**
   * Gets the value of the 'participantB' field.
   * @return The value of the 'participantB' field.
   */
  public java.lang.Integer getParticipantB() {
    return participantB;
  }

  /**
   * Sets the value of the 'participantB' field.
   * @param value the value to set.
   */
  public void setParticipantB(java.lang.Integer value) {
    this.participantB = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'set' field.
   * @return The value of the 'set' field.
   */
  public java.lang.String getSet() {
    return set;
  }

  /**
   * Sets the value of the 'set' field.
   * @param value the value to set.
   */
  public void setSet(java.lang.String value) {
    this.set = value;
  }

  /**
   * Creates a new AnEvent RecordBuilder.
   * @return A new AnEvent RecordBuilder
   */
  public static dajoni.spring.schema.AnEvent.Builder newBuilder() {
    return new dajoni.spring.schema.AnEvent.Builder();
  }

  /**
   * Creates a new AnEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AnEvent RecordBuilder
   */
  public static dajoni.spring.schema.AnEvent.Builder newBuilder(dajoni.spring.schema.AnEvent.Builder other) {
    return new dajoni.spring.schema.AnEvent.Builder(other);
  }

  /**
   * Creates a new AnEvent RecordBuilder by copying an existing AnEvent instance.
   * @param other The existing instance to copy.
   * @return A new AnEvent RecordBuilder
   */
  public static dajoni.spring.schema.AnEvent.Builder newBuilder(dajoni.spring.schema.AnEvent other) {
    return new dajoni.spring.schema.AnEvent.Builder(other);
  }

  /**
   * RecordBuilder for AnEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AnEvent>
    implements org.apache.avro.data.RecordBuilder<AnEvent> {

    private int participantA;
    private int participantB;
    private long timestamp;
    private java.lang.String id;
    private java.lang.String set;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(dajoni.spring.schema.AnEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.participantA)) {
        this.participantA = data().deepCopy(fields()[0].schema(), other.participantA);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.participantB)) {
        this.participantB = data().deepCopy(fields()[1].schema(), other.participantB);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.set)) {
        this.set = data().deepCopy(fields()[4].schema(), other.set);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AnEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(dajoni.spring.schema.AnEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.participantA)) {
        this.participantA = data().deepCopy(fields()[0].schema(), other.participantA);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.participantB)) {
        this.participantB = data().deepCopy(fields()[1].schema(), other.participantB);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.set)) {
        this.set = data().deepCopy(fields()[4].schema(), other.set);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'participantA' field.
      * @return The value.
      */
    public java.lang.Integer getParticipantA() {
      return participantA;
    }

    /**
      * Sets the value of the 'participantA' field.
      * @param value The value of 'participantA'.
      * @return This builder.
      */
    public dajoni.spring.schema.AnEvent.Builder setParticipantA(int value) {
      validate(fields()[0], value);
      this.participantA = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'participantA' field has been set.
      * @return True if the 'participantA' field has been set, false otherwise.
      */
    public boolean hasParticipantA() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'participantA' field.
      * @return This builder.
      */
    public dajoni.spring.schema.AnEvent.Builder clearParticipantA() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'participantB' field.
      * @return The value.
      */
    public java.lang.Integer getParticipantB() {
      return participantB;
    }

    /**
      * Sets the value of the 'participantB' field.
      * @param value The value of 'participantB'.
      * @return This builder.
      */
    public dajoni.spring.schema.AnEvent.Builder setParticipantB(int value) {
      validate(fields()[1], value);
      this.participantB = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'participantB' field has been set.
      * @return True if the 'participantB' field has been set, false otherwise.
      */
    public boolean hasParticipantB() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'participantB' field.
      * @return This builder.
      */
    public dajoni.spring.schema.AnEvent.Builder clearParticipantB() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public dajoni.spring.schema.AnEvent.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public dajoni.spring.schema.AnEvent.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public dajoni.spring.schema.AnEvent.Builder setId(java.lang.String value) {
      validate(fields()[3], value);
      this.id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public dajoni.spring.schema.AnEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'set' field.
      * @return The value.
      */
    public java.lang.String getSet() {
      return set;
    }

    /**
      * Sets the value of the 'set' field.
      * @param value The value of 'set'.
      * @return This builder.
      */
    public dajoni.spring.schema.AnEvent.Builder setSet(java.lang.String value) {
      validate(fields()[4], value);
      this.set = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'set' field has been set.
      * @return True if the 'set' field has been set, false otherwise.
      */
    public boolean hasSet() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'set' field.
      * @return This builder.
      */
    public dajoni.spring.schema.AnEvent.Builder clearSet() {
      set = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public AnEvent build() {
      try {
        AnEvent record = new AnEvent();
        record.participantA = fieldSetFlags()[0] ? this.participantA : (java.lang.Integer) defaultValue(fields()[0]);
        record.participantB = fieldSetFlags()[1] ? this.participantB : (java.lang.Integer) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.id = fieldSetFlags()[3] ? this.id : (java.lang.String) defaultValue(fields()[3]);
        record.set = fieldSetFlags()[4] ? this.set : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
